import matplotlib.pyplot as plt
import random

from scipy.interpolate import interp1d

import ctypes
from ctypes import POINTER
from ctypes import c_void_p  as void_p

import numpy
import pkg_resources
import time
import SharedArray as sa
import uuid

import multiprocessing
import multiprocessing.sharedctypes

import functools
from functools import partial

from ..resolutiontypes import *
from ..statistics import *

def getPointer(darray,dtype=numpy.float32):
    if darray.dtype != dtype:
        return numpy.ascontiguousarray(darray.astype(dtype))
    elif darray.flags['C_CONTIGUOUS'] == False:
        return numpy.ascontiguousarray(darray)
    else:
        return darray


'''
def computeLocal_python( image, x, y, pad, eps, L ):

    def getWindow(pad,eps,L):
        t   = numpy.linspace(-1,1,2*(eps + pad))
        
        def sigmoidal(t,L):
            return 1.0/(1 + numpy.exp(-L[0]*(t+L[1]))) - 1.0/(1 + numpy.exp(-L[0]*(t-L[1])))
        
        u,v  = numpy.meshgrid(t,t)    
        mask = sigmoidal(u,L) * sigmoidal(v,L)
    
        return mask
   
    window = getWindow(pad, eps, L)

    local = image[ y - (eps+pad): y + (eps+pad), x - (eps+pad):x + (eps+pad) ] * window

    if  (local**2).sum() <  1e-5:

        return None, None
    else:
        return compute( local ), local
'''

def window( volume ,pad,L):
    roi = numpy.pad(volume, ( (pad,pad), (pad, pad), (pad, pad) ) )
    t   = numpy.linspace(-1,1,roi.shape[0])

    def sigmoidal(t,L):
        return 1.0/(1 + numpy.exp(-L[0]*(t+L[1]))) - 1.0/(1 + numpy.exp(-L[0]*(t-L[1])))

    u,v,w  = numpy.meshgrid(t,t,t)
    mask = sigmoidal(u,L) * sigmoidal(v,L) * sigmoidal(w,L)

    return roi * mask


def _fsc_( f1, f2, alpha):
    
    def _inprod(x, y):
        return (x * numpy.conjugate(y)).sum()

    start = time.time()

    F1 = numpy.fft.fftshift( numpy.fft.fftn(f1) )
    F2 = numpy.fft.fftshift( numpy.fft.fftn(f2) )
    
    elapsed = time.time() - start

    dx  = 2.0/(f1.shape[2]-1)
    dwx = 1.0/(2*dx)
    dy  = 2.0/(f1.shape[1]-1)
    dwy = 1.0/(2*dy)
    dz  = 2.0/(f1.shape[0]-1)
    dwz = 1.0/(2*dz)

    tx = numpy.linspace(-dwx,dwx,f1.shape[2])
    ty = numpy.linspace(-dwy,dwy,f1.shape[1])
    tz = numpy.linspace(-dwz,dwz,f1.shape[0])
    wx,wy,wz = numpy.meshgrid(tx,ty,tz)   
    
    r = numpy.linspace(0, min(dwx,dwy,dwz), f1.shape[1]//2)
    rc = alpha * dx
    
    curve = numpy.ones(r.shape)
    T  = numpy.ones(r.shape)
    Ts = numpy.ones(r.shape)
    B  = numpy.ones(r.shape)
    
    start = time.time()

    for k in range(1,len(r)):
    
        mask = (wx**2 + wy**2 + wz**2 <= (r[k]+rc)**2) & (wx**2 + wy**2 + wz**2 >= (r[k]-rc)**2 )
        F1at = F1[mask]
        F2at = F2[mask]
        
        nF1at = numpy.linalg.norm(F1at)
        nF2at = numpy.linalg.norm(F2at)
        
        curve[k] = _inprod(F1at, F2at).real / (nF1at * nF2at)

        npixels = (mask.flatten()*1.0 > 0).sum()
        T[k] = ( 0.2071 + 1.9102/numpy.sqrt(npixels) ) / (1.2071 + 0.9102/numpy.sqrt(npixels))        
        Ts[k] = 3.0 / numpy.sqrt(npixels/2.0)

        M1 = numpy.max( abs( F1at ) )
        M2 = numpy.max( abs( F2at ) ) 
    
        m = 1
        M = max(M1, M2)
        a = M/m

        B[k] = 2.0 * numpy.sqrt(a) / (1 + a) 
        
    B[0] = 0

    elapsed = time.time() - start

    return curve, T,Ts, B.real 


def computep(volume, nthreads):

    #ring thickness
    alpha = volume.shape[0]//4

    #even split
    evol1 = volume[0:volume.shape[0]:2,0:volume.shape[1]:2,0:volume.shape[2]:2]
    evol2 = volume[1:volume.shape[0]:2,1:volume.shape[1]:2,1:volume.shape[2]:2]

    ecurve, eTh, eTs, eB = _fsc_parallel_(evol1, evol2, alpha, nthreads)
 
    ####
    size = len(ecurve)
    
    xaxis = numpy.linspace(0, 1, size)
    
    xvals = numpy.linspace(0, xaxis.max(), 4*size)    
    eFC_ = interp1d(xaxis, ecurve.real, kind='cubic')
    eFC_Th = interp1d(xaxis, eTh, kind='cubic')    
    eFC_Ts = interp1d(xaxis, eTs, kind='cubic')
    eFC_B = interp1d(xaxis, eB, kind='cubic')
    
    exth,_ = interpolated_intercept( xvals, eFC_(xvals), eFC_Th(xvals) ) 
    exts,_ = interpolated_intercept( xvals, eFC_(xvals), eFC_Ts(xvals) )
    exrev,_ = interpolated_intercept( xvals, eFC_(xvals), eFC_B(xvals) )

    dic = {}
    dic['curves'] = {
        'even': { 'corr': ecurve, 'halfbit' : eTh, 'sigma': eTs, 'rev': eB} ,
    } 
    
    dic['icurves'] = {
        'even': { 'corr': eFC_, 'halfbit': eFC_Th, 'sigma': eFC_Ts, 'rev': eFC_B },
    }

    dic['x'] = {
        'even': { 'axis': xaxis, 'halfbit': exth, 'sigma' : exts, 'rev': exrev },
    }

    return dic


def compute(volume):

    #ring thickness
    alpha = volume.shape[0]//4

    #even split
    evol1 = volume[0:volume.shape[0]:2,0:volume.shape[1]:2,0:volume.shape[2]:2]
    evol2 = volume[1:volume.shape[0]:2,1:volume.shape[1]:2,1:volume.shape[2]:2]

    ecurve, eTh, eTs, eB = _fsc_(evol1, evol2, alpha)

    #          
    size = len(ecurve)
    
    xaxis = numpy.linspace(0, 1, size)
    
    xvals = numpy.linspace(0, xaxis.max(), 4*size)    

    eFC_ = interp1d(xaxis, ecurve.real, kind='cubic')
    eFC_Th = interp1d(xaxis, eTh, kind='cubic')
    eFC_Ts = interp1d(xaxis, eTs, kind='cubic')
    eFC_B = interp1d(xaxis, eB, kind='cubic')
    
    exth,_ = interpolated_intercept( xvals, eFC_(xvals), eFC_Th(xvals) )
    exts,_ = interpolated_intercept( xvals, eFC_(xvals), eFC_Ts(xvals) )
    exrev,_ = interpolated_intercept( xvals, eFC_(xvals), eFC_B(xvals) )

    dic = {}
    dic['curves'] = {
        'even': { 'corr': ecurve, 'halfbit' : eTh, 'sigma': eTs, 'rev': eB },
    }
    
    dic['icurves'] = {
        'even': { 'corr': eFC_, 'halfbit': eFC_Th, 'sigma': eFC_Ts, 'rev': eFC_B },
    }
    
    dic['x'] = {
        'even': { 'axis': xaxis, 'halfbit': exth, 'sigma' : exts, 'rev': exrev },
    }
    
    return dic

####

def _get_size_from_shape(shape):
    return functools.reduce(lambda x, y: x * y, shape)
 
def _create_np_shared_array(shape, dtype, ctype):
    # Feel free to create a map from usual dtypes to ctypes. Or suggest a more elegant way
    size = _get_size_from_shape(shape)
    shared_mem_chunck = multiprocessing.sharedctypes.RawArray(ctype, size)
    numpy_array_view = numpy.frombuffer(shared_mem_chunck, dtype).reshape(shape)
    return numpy_array_view

def _worker_batch_fsc_(params, idx_start,idx_end, elapsed):
   
    #params = (nr, threads, F1, F2, shm_wx, shm_wy, shm_wz, r, rc, curve, T, Ts, B)
 
    def _inprod(x, y):
        return (x * numpy.conjugate(y)).sum()

    nr  =  params[0]
    F1  =  params[2]
    F2  =  params[3]
    wx  =  params[4]
    wy  =  params[5]
    wz  =  params[6]
    r   =  params[7]
    rc  =  params[8]
    curve = params[9]
    T     = params[10]
    Ts    = params[11]
    B     = params[12]

    for k in range(idx_start, idx_end):
        
        start = time.time()

        mask = (wx**2 + wy**2 + wz**2 <= (r[k]+rc)**2) & (wx**2 + wy**2 + wz**2 >= (r[k]-rc)**2 )
        F1at = F1[mask]
        F2at = F2[mask]

        nF1at = numpy.linalg.norm(F1at)
        nF2at = numpy.linalg.norm(F2at)

        if k > 0:
            curve[k] = _inprod(F1at, F2at).real / (nF1at * nF2at) 
        
            npixels = (mask.flatten()*1.0 > 0).sum()

            T[k] = ( 0.2071 + 1.9102/numpy.sqrt(npixels) ) / (1.2071 + 0.9102/numpy.sqrt(npixels))
            Ts[k] = 3.0 / numpy.sqrt(npixels/2.0)
            
            M1 = numpy.max( abs(F1at) )
            M2 = numpy.max( abs(F2at) ) 

            m = 1
            M = max(M1, M2)
            a = M/m

            B[k] = 2.0 * numpy.sqrt(a) / (1 + a) 
     
        else:
            curve[k] = 1
            T[k] = 1
            Ts[k] = 1
            B[k] = 0

        elapsed0 = time.time() - start
        
        elapsed[k] = elapsed0
        

def _batch_fsc_(params):

    V = params[0]
    t = params[1]
    b = int( numpy.ceil(V/t) ) 

    elapsed = _create_np_shared_array([V,], numpy.float32, ctypes.c_float)
    
    processes = []
    for k in range(t):
        begin_ = k*b
        end_   = min( (k+1)*b, V)
        p = multiprocessing.Process(target=_worker_batch_fsc_, args=(params, begin_, end_, elapsed))
        processes.append(p)
    
    for p in processes:
        p.start()

    for p in processes:
        p.join()
    
    return elapsed


####

def _fsc_parallel_( f1, f2, alpha, threads):
    
    start = time.time()

    F1 = numpy.fft.fftshift( numpy.fft.fftn(f1) )
    F2 = numpy.fft.fftshift( numpy.fft.fftn(f2) )

    elapsed = time.time() - start

    dx  = 2.0/(f1.shape[2]-1)
    dwx = 1.0/(2*dx)
    dy  = 2.0/(f1.shape[1]-1)
    dwy = 1.0/(2*dy)
    dz  = 2.0/(f1.shape[0]-1)
    dwz = 1.0/(2*dz)

    tx = numpy.linspace(-dwx,dwx,f1.shape[2])
    ty = numpy.linspace(-dwy,dwy,f1.shape[1])
    tz = numpy.linspace(-dwz,dwz,f1.shape[0])
    wx,wy,wz = numpy.meshgrid(tx,ty,tz)
    
    r = numpy.linspace(0, min(dwx,dwy,dwz), f1.shape[1]//2)
    rc = alpha * dx

    # sharing meshes wx, wy, wz
    name0x = str( uuid.uuid4() )
    try:
        sa.delete(name0x)
    except:
        pass;
    shm_wx = sa.create(name0x,f1.shape, dtype=numpy.float32)
    shm_wx[:] = wx[:]

    name0y = str( uuid.uuid4() )
    try:
        sa.delete(name0y)
    except:
        pass;
    shm_wy = sa.create(name0y,f1.shape, dtype=numpy.float32)
    shm_wy[:] = wy[:]
    
    name0z = str( uuid.uuid4() )
    try:
        sa.delete(name0z)
    except:
        pass;
    shm_wz = sa.create(name0z,f1.shape, dtype=numpy.float32)
    shm_wz[:] = wz[:]

    ###------

    name1 = str( uuid.uuid4() )
    
    try:
        sa.delete(name1)
    except:
        pass;

    curve = sa.create(name1,r.shape, dtype=numpy.float32)

    name2 = str( uuid.uuid4() )
    
    try:
        sa.delete(name2)
    except:
        pass;

    T = sa.create(name2,r.shape, dtype=numpy.float32)

    name3 = str( uuid.uuid4() )
    
    try:
        sa.delete(name3)
    except:
        pass;

    Ts = sa.create(name3,r.shape, dtype=numpy.float32)

    name4 = str( uuid.uuid4() )
    
    try:
        sa.delete(name4)
    except:
        pass;

    B = sa.create(name4,r.shape, dtype=numpy.float32)

    nr = f1.shape[1]//2
   
    ##

    params = (nr, threads, F1, F2, shm_wx, shm_wy, shm_wz, r, rc, curve, T, Ts, B)
    
    etimes = _batch_fsc_(params)
    
    elapsed = time.time() - start

    sa.delete(name1)
    sa.delete(name2)
    sa.delete(name3)
    sa.delete(name4)
    sa.delete(name0x)
    sa.delete(name0y)
    sa.delete(name0z)

    return curve, T, Ts, B


############

'''

def _worker_batch_frcMap_(params, idx_start,idx_end):

    image    = params[0]
    N        = params[2]
    output   = params[3]
    
    L     = params[4]
    ngrid = params[5]
    eps   = params[6]
    flag  = params[7]
    
    n      = image.shape[0]
    delta  = float( n/ngrid )
    rad    = int( delta/2.0 )

    for k in range(idx_start, idx_end):

        row = k // ngrid
        col = k % ngrid

        y = int( delta * (0.5 + col) )
        x = int( delta * (0.5 + row) )
        
        start    = time.time()

        if ( x - eps > 0)  and (x + eps < n) and (y - eps > 0) and (y + eps < n):
            
            if flag == 'local_python':
                dic, _ = computeLocal_python( image, x, y, 0, eps, L)
            else:
                dic, _ = computeLocal_C( image, x, y, 0, eps, L) 

            if dic is None:
 
                # halfbit
                output[0][ max(0,y - rad): min( y + rad,n) , max(0,x-rad): min(x+rad,n)] = 0            
                # sigma
                output[1][ max(0,y - rad): min( y + rad,n) , max(0,x-rad): min(x+rad,n)] = 0 
 
                #reverse
                output[2][ max(0,y - rad): min( y + rad,n) , max(0,x-rad): min(x+rad,n)] = 0 
                
            else:
                
                # halfbit
                output[0][ max(0,y - rad): min( y + rad,n) , max(0,x-rad): min(x+rad,n)] = dic['x']['even']['halfbit'] 
                
                # sigma
                output[1][ max(0,y - rad): min( y + rad,n) , max(0,x-rad): min(x+rad,n)] = dic['x']['even']['sigma'] 
                
                # reverse
                output[2][ max(0,y - rad): min( y + rad,n) , max(0,x-rad): min(x+rad,n)] = dic['x']['even']['rev'] 
            
        elapsed  = time.time() - start

        

def _frcMap_batch_(params):

    N = params[2]
    t = params[1]
    b = int( numpy.ceil(N/t) ) 
    
    processes = []
    for k in range(t):
        begin_ = k*b
        end_   = min( (k+1)*b, N)
        p = multiprocessing.Process(target=_worker_batch_frcMap_, args=(params, begin_, end_))
        processes.append(p)
    
    for p in processes:
        p.start()

    for p in processes:
        p.join()
        
def map(image, threads, gridsize, eps, L):
    
    imgpadded = numpy.pad(image, (eps, eps))

    start = time.time()
    name1 = str( uuid.uuid4() )
    name2 = str( uuid.uuid4() )
    name3 = str( uuid.uuid4() )

    try:
        sa.delete(name1)
    except:
        pass;
        
    outputH = sa.create(name1, imgpadded.shape, dtype=numpy.float32)

    try:
        sa.delete(name2)
    except:
        pass;
        
    outputS = sa.create(name2, imgpadded.shape, dtype=numpy.float32)

    try:
        sa.delete(name3)
    except:
        pass;
        
    outputM = sa.create(name3, imgpadded.shape, dtype=numpy.float32)

    output = [outputH, outputS, outputM ] 

    satime = time.time() - start
    start = time.time()
    N = gridsize * gridsize 
    
    params = (imgpadded, threads, N, output, L, gridsize, eps, "local_c" )
    
    _frcMap_batch_(params)
    
    elapsed = time.time() - start

    sa.delete(name1)
    sa.delete(name2)
    sa.delete(name3)

    print('Done: Image processed within {} sec'.format(elapsed))
    
    output[0] = output[0][eps:eps+image.shape[0],eps:eps+image.shape[1]]
    output[1] = output[1][eps:eps+image.shape[0],eps:eps+image.shape[1]]
    output[2] = output[2][eps:eps+image.shape[0],eps:eps+image.shape[1]]

    return output

'''

def plot( dic ,usr ):

    if dic is None:
        print('ssc-resolution error! Empty FSC (probably due to an empty image)')
        return None

    else:
        label = usr['label']
        dx    = usr['pxlsize']
        un    = usr['unit']

        if 'figsize' in usr.keys():
            figsize = usr['figsize']
        else:
            figsize = (10,10)

        if 'reverse' in usr.keys():
            rev = usr['reverse']
        else:
            rev = False

        if 'clean' in usr.keys():
            clean = usr['clean']
        else:
            clean = False

        size = len(dic['curves']['even']['corr'])

        xaxis = dic['x']['even']['axis']

        FC   = dic['icurves']['even']['corr']
        FCTh = dic['icurves']['even']['halfbit']
        FCTs = dic['icurves']['even']['sigma']
        FCB  = dic['icurves']['even']['rev']
        xth  = dic['x']['even']['halfbit']
        xts  = dic['x']['even']['sigma']
        xrev = dic['x']['even']['rev']

        xvals = numpy.linspace(0, xaxis.max(), 4*size)

        plt.figure(figsize=figsize)
        plt.plot(xvals, FC(xvals), 'k.-')
        plt.plot(xvals, FCTh(xvals), 'ys-')
        plt.plot(xvals, FCTs(xvals), 'gd-')

        if rev:
            plt.plot(xvals, FCB(xvals), 'ro-')

            legend = ['FSC: {}'.format(label), 0 , 0,0]
        else:
            legend = ['FSC: {}'.format(label), 0 , 0]

	if xth > 0:
            
            dxth = 0.02 #abs( dic['x']['even']['halfbit'] - dic['x']['odd']['halfbit'] )
            xth_ = dic['x']['even']['halfbit'] #( dic['x']['even']['halfbit']+dic['x']['odd']['halfbit'] ) /2.0
            if clean:
                legend[1] = '{}: {}'.format(r'$T_{1/2}$',round(xth,4) )
            else:
                legend[1] = '{}: {} - res: {} {}'.format(r'$T_{1/2}$', round(xth,4), round(dx/xth,3), un)
                
            plt.axvspan(xth_ - dxth/2, xth_ + dxth/2, color='yellow', alpha=0.6, lw=0)
                
        if xts > 0:
            
            dxts = 0.02 #abs( dic['x']['even']['sigma'] - dic['x']['odd']['sigma'] )
            xts_ = dic['x']['even']['sigma'] #( dic['x']['even']['sigma']+dic['x']['odd']['sigma'] ) /2.0

            if clean:
                legend[2] = '{}: {}'.format( r'$T_{3\sigma}$', round(xts,4) )
            else:
                legend[2] = '{}: {} - res: {} {}'.format(r'$T_{3\sigma}$',round(xts,4), round(dx/xts,3), un)

            plt.axvspan(xts_ - dxts/2, xts_ + dxts/2, color='green', alpha=0.4, lw=0)

        if xrev > 0 and rev:

            dxrev = 0.02 #abs( dic['x']['even']['rev'] - dic['x']['odd']['rev'] )
            xrev_ = dic['x']['even']['rev'] # ( dic['x']['even']['rev']+dic['x']['odd']['rev'] ) /2.0

            if clean:
                legend[3] = 'B: {}'.format(round(xrev,4))
            else:
                legend[3] = 'B: {} - res: {} {}'.format(round(xrev,4), round(dx/xrev,3), un)

            plt.axvspan(xrev_ - dxrev/2, xrev_ + dxrev/2, color='red', alpha=0.2, lw=0)


        plt.legend(legend,prop={'size': 16})
        plt.xticks(fontsize=14)
        plt.yticks(fontsize=14)
        plt.ylim([FCB(xvals).min(), FC(xvals).max()])

